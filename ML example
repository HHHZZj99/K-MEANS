#linear regression
##import first
model1<-lm(log(sale.proce.n)~log(gross.sqft),data=bk.homes)
bk.homes[which(bk.homes$gross.sqft==0),]
bk.homes<-bk.homes[which(bk.homes$gross.sqft>0&bk.homes$land.sqft>0),]
model1<-lm(log(sale.price.n)~log(gross.sqft),data=bk.homes)
summary(model1)

plot(log(bk.homes$gross.sqft),log(bk.homes$sale.price.n))
abline(model1,col="red",lwd=2)
plot(resid(model1))

model2<-lm(log(sale.price.n)~log(gross.sqft)+log(land.sqft)+factor(neighborhood),data=bk.homes)
summary(model2)
plot(resid(model2))

#leave out intercept for ease of interpretability
model2a<-lm(log(sale.price.n)~0+log(gross.sqft)+log(land.sqft)+factor(neighboehood),data=bk.homes)
summary(model2a)
plot(resid(model2a))

#add building type
model3<-lm(log(sale.price.n)~log(gross.sqft)+log(land.sqft)+factor(neighborhood)+factor(building.clss.category),data=bk.homes)
summary(model3)
plot(resid(model3))

#interact neighborhood and building type
model4<-lm(log(sale.price.n)~log(gross.sqft)+log(land.sqft)+factor(neighborhood)*factor(building.class.category),data=bk.homes)
summary(model4)
plot(resid(model4))






#KNN
require(gdata)
require(geoPlot)
require(class)

mt<-read.xls("rollingsales_manhattan.xls",pattern="BOROUGH",stringAsFactors=FALSE)
head(mt)
summary(mt)

names(mt)<-tolower(names(mt))

mt$sale.price.n<-as.numric(gsub("[^[:digit:]]","",mt$sale.price))
sum(is,na(mt$sale.price.n))
sum(mt$sale.price.n==0)
names(mt)<-tolower(names(mt))

##clean the data with regular expressions
mt$gross.sqft<-as.numeric(gsub("[^[:digit:]]","",mt$gross.square.feet))
mt$land.sqft<-as.numeric(gsub("[^[:digit:]]","",mt$land.square.feet))

mt$sale.date<-as.Date(mt$sale.date)
mt$year.built<-as.numeric(as.character(mt$year.built))
mt$zip.code<-as.character(mt$zip.code)


##standardise the data(set your built start to 0;land and gross sq ft;sale prize(exclude 0 and possibly others);possibly tax block;outside dataset for coords of tax BLOck/lot?)
min_prize<-10000
mt<-mt[which(mt$sale.prize.n>=min_prize),]

n_obs<-dim(mt)[1]

mt$addredd.noapt<-gsub("[,][[:print:]]*","",gsub("[]+","",trim(mt$address)))

mt_add<-unique(data.fram(mt$address.noapt,mt$zip.code,stringAsFactors=FALSE))
names(mt_add)<-c("address.noapt","zip.code")
mt_add<-mt_add[order(mt_add$address.aoapt),]

#find duplicated address with different postcode
dup<-duplicated(mt_add$address.noapt)
#remove them
dup_add<-mt_add[dup,1]
mt_add<-mt_add[mt_add$address.noapt!=dup_add[1]&mt_add$address.noapt!=dup_add[2]),]

n_add<-dim(mt_add)[1]

#sample 500 addresses so we dont run over our google maos API daily limit(and we are not waiting forever)
n_sample<-500
add_sample<-my_add[sample.int(n_add,size=n_sample),]

#FIRST, try a query with the address we have
auery_list<-addrListLookup(data.frame(1:n_sample,add_sample$address.noapt,rep("NEW YORK",times=n_sample),
rep("NY",times=n_sample),add_sample$zip.code,
rep("US",times=n_sample)))[,1:4]

query_list$matched<-(query_list$latitude!=0)
unmatched_inds<-which(!query_list$matched)
unmatched<-length(unmatched_inds)

#try changing EAST/WEST to E/W
query_list[unmatched_inds,1:4]<-addrListLookup
(data.frame(1:unmatched,gsub("WEST","W",gsub("EAST","E",add_sample[unmatched_inds,1])),
rep("NEW YORK",times=unmatched),rep("NY",times=unmatched),
    add_sample[unmatched_inds,2],rep["US",times=unmatched])))[1:4]
    
query_list$matched<-(query_list$latitude!=0)
unmatched_inds<-which(!query_list$matched)
unmatched<-length(unmatched_inds)

#try changing street/avenue to ST/AVE
query_list[unmatched_inds,1:4]<-addrListLookup
(data.frame(1:unmatched,gsub("WEST","W",gsub("EAST","E",gsub("STREET","ST",gsub("AVENUE","AVE",add_sample[unmatched_inds,1])))),
rep("NEW YORK",times=unmatched),rep("NY",times=unmatched),
    add_sample[unmatched_inds,2],rep["US",times=unmatched])))[1:4]
    
query_list$matched<-(query_list$latitude!=0)
unmatched_inds<-which(!query_list$matched)
unmatched<-length(unmatched_inds)

##have to be satisfied for now
add_sample<-cbind(add_sample,query_list$latitude,query_list$longitude)
names(add_sample)[3:4]<-c("latitude","longitude")

add_sample<-add_sample[add_sample4latitude!=0,]

add_use<-merge(mt,add_sample)
add_use<-add_use(!is.na(add_use$latitude),)

##map coordinates
map_coords<-add_use[,c(2,4,26,27)]
table(map_coords$neighborhood)
map_coords$neighboehood<-as.factor(map_coords$neighborhood)

geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)

#knn function
map_coords$class<-as.numeric(map_coords$neighborhood)
n_cases<-dim(map_coords)[1]
split<-0.8

train_inds<-sample.int(n_cases,floor(split*n_cases))
test_inds<-(1:n_cases)[-train_inds]

k_max<-10
knn_pred<-matrix(NA,ncol=k_max,nrow=length(test_inds))
knn_test_error<-rep(NA,times=k_max)

for(i in 1:k_max){
knn_pred[,i]<-knn(map_coords[train_inds,3:4],
map_coords[test_inds,3:4],cl=map_coords[train_inds,5],k=i)
knn_test_error[i]<-sum(knn_pred[,i]!=
map_coords[test_inds,5])/length(test_inds)
}

plot(1:k_max,knn_test_error)

























